{"version":3,"sources":["ResultCard.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["levelToColor","0","1","2","3","ResultCard","data","result","Container","Card","sx","marginLeft","marginRight","maxwidth","CardContent","Typography","variant","gutterBottom","color","Stack","direction","spacing","alignItems","lineHeight","toUpperCase","substring","theme","createTheme","palette","primary","main","secondary","App","React","useState","setResult","allergyData","ThemeProvider","className","CssBaseline","AppBar","position","Toolbar","justifyContent","top","Autocomplete","freeSolo","options","Object","keys","map","name","renderInput","params","TextField","label","onChange","event","newResult","handleSearch","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIMA,EAAe,CACjBC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,WAuBQC,MApBf,YAAqC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,OACvB,OACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,GAAI,CAACC,WAAY,OAAQC,YAAa,QACtCC,SAAS,KAFb,SAII,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,SAAuCV,IACvC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,YAAYN,GAAI,CAACQ,MAAO,QAASD,cAAY,EAAjE,SAAmEX,EAAKC,GAAL,OACnE,eAACY,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,GAAKC,WAAW,WAAhD,UACI,cAAC,IAAD,CAAUZ,GAAI,CAACQ,MAAOlB,EAAaM,EAAKC,GAAL,UACnC,cAACQ,EAAA,EAAD,CAAYL,GAAI,CAACa,WAAY,GAA7B,SAAkCjB,EAAKC,GAAL,QAAwB,GAAGiB,cAAgBlB,EAAKC,GAAL,QAAwBkB,UAAU,gB,QCVxHC,EAXHC,YAAY,CACtBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,c,QC0CGE,MA3Cf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACN3B,EADM,KACE4B,EADF,KAEPC,EAAc9B,EAAKA,KAMzB,OACE,cAAC+B,EAAA,EAAD,CAAeX,MAAOA,EAAtB,SACE,sBAAKY,UAAU,MAAMpB,MAAM,UAA3B,UACE,cAACqB,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACjC,EAAA,EAAD,CAAWK,SAAS,KAApB,SACE,cAAC6B,EAAA,EAAD,UACE,eAAC3B,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,QAA/B,kBACO,oCADP,uBAMN,eAACC,EAAA,EAAD,CACEE,QAAS,GACTsB,eAAe,SACfrB,WAAW,SACXZ,GAAI,CAAC+B,SAAU,WAAYG,IAAK,SAJlC,UAKE,cAACpC,EAAA,EAAD,UACE,cAACqC,EAAA,EAAD,CACEC,UAAQ,EACRC,QAASC,OAAOC,KAAKb,GAAac,KAAI,SAAAC,GAAI,OAAIA,KAC9CC,YAAa,SAAAC,GAAM,OAAI,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,aACpDC,SAAU,SAACC,EAAOC,GAAR,OA3BD,SAACA,GACpBvB,EAAUuB,GA0BgCC,CAAaD,IAC7ChD,GAAI,CAACC,WAAY,OAAQC,YAAa,OAAQgD,gBAAiB,QAC/D/C,SAAS,SAGZN,GAAUA,KAAU6B,GAAe,cAAC,EAAD,CAAY9B,KAAM8B,EAAa7B,OAAQA,aC/BtEsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0b88f784.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Card, CardContent, Typography, Stack } from '@mui/material';\nimport PetsIcon from '@mui/icons-material/Pets';\n\nconst levelToColor = {\n    0: \"#4caf50\",\n    1: \"#ffeb3b\",\n    2: \"#ff9800\",\n    3: \"#f44336\"\n}\n\nfunction ResultCard({data, result}) {\n    return (\n        <Container>\n            <Card\n                sx={{marginLeft: 'auto', marginRight: 'auto'}}\n                maxwidth=\"md\"\n            >\n                <CardContent>\n                    <Typography variant=\"h4\" gutterBottom>{result}</Typography>\n                    <Typography variant=\"subtitle2\" sx={{color: 'gray'}} gutterBottom>{data[result][\"type\"]}</Typography>\n                    <Stack direction='row' spacing={0.5} alignItems=\"flex-end\">\n                        <PetsIcon sx={{color: levelToColor[data[result][\"level\"]]}}/>\n                        <Typography sx={{lineHeight: 1}}>{data[result][\"details\"][0].toUpperCase() + data[result][\"details\"].substring(1)}</Typography>\n                    </Stack>\n                </CardContent>\n          </Card>\n        </Container>\n    )\n}\n\nexport default ResultCard","import { createTheme } from '@mui/material/styles';\n\nlet theme = createTheme({\n  palette: {\n    primary: {\n      main: '#b388ff',\n    },\n    secondary: {\n      main: '#d1c4e9',\n    },\n  },\n});\n\nexport default theme;","\nimport React from 'react';\nimport { AppBar, Stack, Container, Toolbar, Typography, TextField, ThemeProvider, Autocomplete, CssBaseline } from '@mui/material';\nimport ResultCard from './ResultCard';\nimport theme from './theme';\nimport data from './formatedData.json'\n\nfunction App() {\n  const [result, setResult] = React.useState('')\n  const allergyData = data.data\n\n  const handleSearch = (newResult) => {\n    setResult(newResult)\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\" color=\"#d1c4e9\">\n        <CssBaseline/>\n        <AppBar position=\"static\">\n          <Container maxwidth=\"xl\">\n            <Toolbar>\n              <Typography variant=\"h5\" color=\"white\">\n                What <b>CAN</b> Gourdy Eat\n              </Typography>\n            </Toolbar>\n          </Container>\n        </AppBar>\n        <Stack \n          spacing={12} \n          justifyContent=\"center\"\n          alignItems=\"center\"\n          sx={{position: 'relative', top: '100px'}}>\n          <Container>\n            <Autocomplete \n              freeSolo \n              options={Object.keys(allergyData).map(name => name)}\n              renderInput={params => <TextField {...params} label=\"Search\"/>}\n              onChange={(event, newResult) => handleSearch(newResult)}\n              sx={{marginLeft: 'auto', marginRight: 'auto', backgroundColor: '#fff'}}\n              maxwidth=\"md\"\n            />\n          </Container>\n          {result && result in allergyData && <ResultCard data={allergyData} result={result}/>}\n        </Stack>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}